Compilation: OK
test: ft_check_mate("......
......
......
......")
expected_output: 1
user_output: 1
test: ft_check_mate("......
...K..
...P..
..K...")
expected_output: 1
user_output: 1
test: ft_check_mate("K.....
......
......
......
......
......")
expected_output: 1
user_output: 1
test: ft_check_mate("K.....
......
......
......")
expected_output: 1
user_output: 1
test: ft_check_mate("Z.....
......
......
......
......
......")
expected_output: 1
user_output: 1
test: ft_check_mate("Z.....
......
......
......")
expected_output: 1
user_output: 1
test: ft_check_mate("Q.....
......
......
......
......
......")
expected_output: 1
user_output: 1
test: ft_check_mate("Q.....
......
......
......")
expected_output: 1
user_output: 1
test: ft_check_mate(".")
expected_output: 1
user_output: 1
test: ft_check_mate("K")
expected_output: 1
user_output: 1
test: ft_check_mate("KKKK
KKKK
KKKK
KKKK")
expected_output: 1
user_output: 1
test: ft_check_mate("1234
1234
1234
1234")
expected_output: 1
user_output: 1
test: ft_check_mate("1")
expected_output: 1
user_output: 1
test: ft_check_mate("1234")
expected_output: 1
user_output: 1
test: ft_check_mate("..
.K")
expected_output: 1
user_output: 1
test: ft_check_mate("...
..
.KR")
expected_output: 1
user_output: 1
test: ft_check_mate("...
R.K
...")
expected_output: 0
user_output: 0
test: ft_check_mate("RK
..")
expected_output: 0
user_output: 0
test: ft_check_mate(".R.....K
........
........
........
........
........
........
........")
expected_output: 0
user_output: 0
test: ft_check_mate(".R.....K
........
........
........

........
........
........
........")
expected_output: 1
user_output: 1
test: ft_check_mate("
.R.....K
........
........
........
........
........
........
........")
expected_output: 1
user_output: 1
test: ft_check_mate(".R.....K
........
........
........
........
........
........
........
")
=================================================================
==92867==ERROR: AddressSanitizer: global-buffer-overflow on address 0x00010df5c650 at pc 0x00010df5b8a8 bp 0x7ffee1ca7580 sp 0x7ffee1ca7578
READ of size 1 at 0x00010df5c650 thread T0
    #0 0x10df5b8a7 in check_board ssacrist.c:334
    #1 0x10df5b9b4 in ft_check_errors ssacrist.c:353
    #2 0x10df5bb14 in ft_check_mate ssacrist.c:378
    #3 0x10df58fda in assert_results main.c:11
    #4 0x10df591fb in main main.c:39
    #5 0x7fff7309d2e4 in start (libdyld.dylib:x86_64+0x112e4)

0x00010df5c650 is located 48 bytes to the left of global variable '<string literal>' defined in 'main.c:40:20' (0x10df5c680) of size 72
  '<string literal>' is ascii string 'RRRRR..K
........
........
........
........
........
........
........'
0x00010df5c650 is located 7 bytes to the right of global variable '<string literal>' defined in 'main.c:39:20' (0x10df5c600) of size 73
  '<string literal>' is ascii string '.R.....K
........
........
........
........
........
........
........
'
SUMMARY: AddressSanitizer: global-buffer-overflow ssacrist.c:334 in check_board
Shadow bytes around the buggy address:
  0x100021beb870: 06 f9 f9 f9 f9 f9 f9 f9 00 03 f9 f9 f9 f9 f9 f9
  0x100021beb880: 00 04 f9 f9 f9 f9 f9 f9 06 f9 f9 f9 f9 f9 f9 f9
  0x100021beb890: 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9
  0x100021beb8a0: 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
  0x100021beb8b0: 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
=>0x100021beb8c0: 00 00 00 00 00 00 00 00 00 01[f9]f9 f9 f9 f9 f9
  0x100021beb8d0: 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9
  0x100021beb8e0: 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9
  0x100021beb8f0: 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9
  0x100021beb900: 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9
  0x100021beb910: 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==92867==ABORTING
Exec: KO
