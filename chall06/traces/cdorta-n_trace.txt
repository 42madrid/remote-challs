Compilation: OK
test: ft_check_mate("......
......
......
......")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate("......
...K..
...P..
..K...")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate("K.....
......
......
......
......
......")
[K][.][.][.][.][.]
[.][.][.][.][.][.]
[.][.][.][.][.][.]
[.][.][.][.][.][.]
[.][.][.][.][.][.]
[.][.][.][.][.][.]
expected_output: 1
user_output: 1
test: ft_check_mate("K.....
......
......
......")

--->An error occur with the chessboard, invalid number of rows and columns. Please, write a valid board with Max size of 9X9 <---
expected_output: 1
user_output: 1
test: ft_check_mate("Z.....
......
......
......
......
......")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate("Z.....
......
......
......")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate("Q.....
......
......
......
......
......")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate("Q.....
......
......
......")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate(".")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate("K")
[K]
expected_output: 1
user_output: 1
test: ft_check_mate("KKKK
KKKK
KKKK
KKKK")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate("1234
1234
1234
1234")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate("1")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate("1234")

--->An error occur with the chessboard, check the input, check the characters and the number of KIng pieces presented <---
expected_output: 1
user_output: 1
test: ft_check_mate("..
.K")
=================================================================
==92846==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffeead3b326 at pc 0x000104ec625b bp 0x7ffeead3b2f0 sp 0x7ffeead3b2e8
READ of size 1 at 0x7ffeead3b326 thread T0
    #0 0x104ec625a in ft_chesstable cdorta-n.c:71
    #1 0x104ec7ad9 in ft_check_mate cdorta-n.c:221
    #2 0x104ec586a in assert_results main.c:11
    #3 0x104ec5a1d in main main.c:32
    #4 0x7fff7309d2e4 in start (libdyld.dylib:x86_64+0x112e4)

Address 0x7ffeead3b326 is located in stack of thread T0
SUMMARY: AddressSanitizer: dynamic-stack-buffer-overflow cdorta-n.c:71 in ft_chesstable
Shadow bytes around the buggy address:
  0x1fffdd5a7610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdd5a7620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdd5a7630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdd5a7640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdd5a7650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x1fffdd5a7660: ca ca ca ca[04]cb cb cb cb cb cb cb 00 00 00 00
  0x1fffdd5a7670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdd5a7680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdd5a7690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdd5a76a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x1fffdd5a76b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==92846==ABORTING
[.][.]
[.][K]
Exec: KO
